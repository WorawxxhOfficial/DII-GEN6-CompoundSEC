package gui;

import keycards.KeyCard;
import keycards.CardDatabase;
import logs.LogManager;

import javax.swing.*;
import java.awt.*;
import java.time.LocalDateTime;

/**
 * ManagerGUI: ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ KeyCards ‡πÅ‡∏•‡∏∞ Logs ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
 *
 * üü¢ User Story ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:
 * - "‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö ‡∏â‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°, ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡πÅ‡∏•‡∏∞‡∏•‡∏ö KeyCards ‡πÑ‡∏î‡πâ"
 * - "‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö ‡∏â‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Logs ‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô"
 *
 * üü¢ Features:
 * - ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç KeyCards
 * - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á Logs ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
 * - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Permissions ‡∏Ç‡∏≠‡∏á KeyCards
 */
public class ManagerGUI extends JFrame {
    private JButton addCardButton, removeCardButton, editCardButton;
    private JComboBox<String> cardDropdown;
    private JTextArea logArea;
    private UserGUI userGUI;

    /**
     * Constructor: ‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡∏Ç‡∏≠‡∏á Manager Panel
     * @param userGUI ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á User GUI
     */
    public ManagerGUI(UserGUI userGUI) {
        this.userGUI = userGUI;
        setTitle("Manager Panel");
        setSize(800, 600);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setLayout(new BorderLayout(10, 10));
        getContentPane().setBackground(new Color(45, 45, 45)); // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°

        // ** Control Panel **
        JPanel controlPanel = new JPanel(new GridLayout(1, 3, 10, 10));
        controlPanel.setBackground(new Color(55, 55, 55));

        // ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏±‡∏ï‡∏£
        addCardButton = createStyledButton("Add Card", new Color(100, 149, 237)); // ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô
        removeCardButton = createStyledButton("Remove Card", new Color(255, 140, 140)); // ‡πÅ‡∏î‡∏á‡∏≠‡πà‡∏≠‡∏ô
        editCardButton = createStyledButton("Edit Card", new Color(255, 180, 120)); // ‡∏™‡πâ‡∏°‡∏≠‡πà‡∏≠‡∏ô

        controlPanel.add(addCardButton);
        controlPanel.add(editCardButton);
        controlPanel.add(removeCardButton);

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î ActionListener ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°
        addCardButton.addActionListener(e -> showAddCardDialog());
        removeCardButton.addActionListener(e -> removeCard());
        editCardButton.addActionListener(e -> showEditCardDialog());

        // ** Logs Panel **
        logArea = new JTextArea();
        logArea.setEditable(false);
        logArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
        logArea.setBackground(new Color(55, 55, 55)); // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°
        logArea.setForeground(Color.WHITE); // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
        JScrollPane logScroll = new JScrollPane(logArea);
        logScroll.setBorder(BorderFactory.createTitledBorder(null, "Access Logs", 0, 0, new Font("Arial", Font.BOLD, 14), Color.WHITE));

        add(controlPanel, BorderLayout.NORTH);
        add(logScroll, BorderLayout.CENTER);
        updateDropdown();
        setVisible(true);
    }

    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
     */
    private JButton createStyledButton(String text, Color bgColor) {
        JButton button = new JButton(text);
        button.setFont(new Font("Arial", Font.BOLD, 14));
        button.setBackground(bgColor);
        button.setForeground(Color.BLACK);
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));
        return button;
    }

    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ï‡∏£‡πÉ‡∏ô Dropdown
     */
    private void updateDropdown() {
        if (cardDropdown == null) {
            cardDropdown = new JComboBox<>();
            add(cardDropdown, BorderLayout.SOUTH);
        }
        cardDropdown.removeAllItems();
        for (KeyCard card : CardDatabase.getCards()) {
            cardDropdown.addItem(card.getDisplayName());
        }
    }

    /**
     * ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° KeyCard ‡πÉ‡∏´‡∏°‡πà
     */
    private void showAddCardDialog() {
        JTextField nameField = new JTextField();
        JCheckBox[] permissionCheckboxes = new JCheckBox[9];
        String[] rooms = {"101", "102", "103", "201", "202", "203", "301", "302", "303"};

        JPanel panel = new JPanel(new GridLayout(11, 1));
        panel.setBackground(new Color(55, 55, 55));

        JLabel nameLabel = new JLabel("Enter Customer Name:");
        nameLabel.setForeground(Color.WHITE);
        panel.add(nameLabel);
        panel.add(nameField);

        JLabel permLabel = new JLabel("Permissions:");
        permLabel.setForeground(Color.WHITE);
        panel.add(permLabel);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Checkbox ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà KeyCard ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ
        for (int i = 0; i < rooms.length; i++) {
            permissionCheckboxes[i] = new JCheckBox("Access to Room " + rooms[i]);
            permissionCheckboxes[i].setForeground(Color.WHITE);
            permissionCheckboxes[i].setBackground(new Color(55, 55, 55));
            panel.add(permissionCheckboxes[i]);
        }

        int result = JOptionPane.showConfirmDialog(this, panel, "Add New Card", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            String name = nameField.getText().trim();
            if (!name.isEmpty()) {
                KeyCard newCard = new KeyCard(name);
                for (int i = 0; i < rooms.length; i++) {
                    newCard.setPermission(rooms[i], permissionCheckboxes[i].isSelected());
                }
                CardDatabase.addCard(newCard);
                updateDropdown();
                userGUI.refreshCardPanel();
                log("Added Card: " + newCard.getDisplayName());
            }
        }
    }

    /**
     * ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• KeyCard
     */
    private void showEditCardDialog() {
        String selectedCardName = (String) cardDropdown.getSelectedItem();
        KeyCard selectedCard = CardDatabase.getCardByName(selectedCardName);

        if (selectedCard != null) {
            JTextField nameField = new JTextField(selectedCard.getName());
            JCheckBox[] permissionCheckboxes = new JCheckBox[9];
            String[] rooms = {"101", "102", "103", "201", "202", "203", "301", "302", "303"};

            JPanel panel = new JPanel(new GridLayout(11, 1));
            panel.setBackground(new Color(55, 55, 55));

            JLabel nameLabel = new JLabel("Edit Name:");
            nameLabel.setForeground(Color.WHITE);
            panel.add(nameLabel);
            panel.add(nameField);

            JLabel permLabel = new JLabel("Permissions:");
            permLabel.setForeground(Color.WHITE);
            panel.add(permLabel);

            for (int i = 0; i < rooms.length; i++) {
                permissionCheckboxes[i] = new JCheckBox("Access to Room " + rooms[i], selectedCard.canAccessRoom(rooms[i]));
                permissionCheckboxes[i].setForeground(Color.WHITE);
                permissionCheckboxes[i].setBackground(new Color(55, 55, 55));
                panel.add(permissionCheckboxes[i]);
            }

            int result = JOptionPane.showConfirmDialog(this, panel, "Edit Card", JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION) {
                selectedCard.setName(nameField.getText().trim());
                for (int i = 0; i < rooms.length; i++) {
                    selectedCard.setPermission(rooms[i], permissionCheckboxes[i].isSelected());
                }
                updateDropdown();
                userGUI.refreshCardPanel();
                log("Edited Card: " + selectedCard.getDisplayName());
            }
        }
    }

    /**
     * ‡∏•‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
     */
    private void removeCard() {
        String selectedCard = (String) cardDropdown.getSelectedItem();
        if (selectedCard != null && !selectedCard.contains("Manager")) {
            CardDatabase.removeCard(selectedCard);
            updateDropdown();
            userGUI.refreshCardPanel();
            log("Removed Card: " + selectedCard);
        } else {
            JOptionPane.showMessageDialog(this, "Manager Card cannot be removed!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á Logs
     */
    private void log(String message) {
        logArea.append("[" + LocalDateTime.now() + "] " + message + "\n");
        LogManager.saveLog(message);
    }
}
